package main

import (
	"fmt"
)

//Для определения интерфейса применяется ключевое слово interface:
//Данный интерфейс называется vehicle (транспортное средство). Допустим, данный интерфейс представляет
//некоторое транспортное средство. Он определяет функцию move(), которая не принимает никаких параметров и ничего не возвращает.

type Vehicle interface {
	move()
	name()
}

//При этом важно понимать, что интерфейс - это именно абстракция, а не конкретный тип, как int, st1ring или структуры.
//К примеру, мы не можем напрямую создать объект интерфейса: var v vehicle = vehicle{}
//Интерфейс представляет своего рода контракт, которому должен соответствовать тип данных.
//Чтобы тип данных соответствовал некоторому интерфейсу, данный тип должен реализовать в виде методов все функции этого интерфейса.
// Например, определим две структуры:

// структура "Автомобиль"
type Car struct{ Name string }

// структура "Самолет"
type Aircraft struct{ Name string }

func (c Car) move() {
	fmt.Println("Автомобиль едет")
}

func (c Car) name() {
	fmt.Println("name", c.Name)
}

func (a Aircraft) move() {
	fmt.Println("Самолет летит")
}

func (a Aircraft) name() {
	fmt.Println("name", a.Name)
}

func main() {
	var tesla Vehicle = Car{Name: "asd"}
	var boing Vehicle = Aircraft{Name: "hgello"}
	tesla.move()
	boing.move()
	tesla.name()
	boing.name()

}

//Здесь определены две структуры: Car и Aircraft, которые, предположим, представляют, автомобиль и самолет соответственно.
//Для каждой из структур определен метод move(), который имитирует перемещение транспортного средства.
//Этот метод move соответствует функции move интерфейса vehicle по типу параметров и типу возвращаемых значений.
//Поскольку между методом структур и функций в интерфейсе есть соответствие, то подобные структуры неявно реализуют
//данный интерфейс.

//В Go интерфейс реализуется неявно. Нам не надо специально указывать, что структуры применяют определенный интерфейс,
//как в некоторых других языках программирования.
//Для реализации типу данных достаточно реализовать методы, которые определяет интерфейс.
//Поскольку структуры Car и Aircraft реализуют интерфейс Vehicle, то мы можем определить переменные данного интерфейса,
//передав им объекты структур:

//1. var tesla Vehicle = Car{}
//2. var boing Vehicle = Aircraft{}
